@model Story1.Models.ViewModels.UserAccountViewModel

@*
    Programmer: Nina Hoang
    Class: CIS234A
    Date: 11/14/2019
    Purpose: To create a web gui for user account settings.
*@

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body {
            font-family: Arial, Helvetica, sans-serif;
            background-image: url('../../Content/HTML/clover.PNG');
            background-repeat: no-repeat;
            background-position: center center;
            background-size: cover;
            margin: auto;
        }

        * {
            box-sizing: border-box;
        }

        /* Add padding to containers */
        .container {
            padding: 16px;
            /*background-color: #80ced6;*/
        }

        /* Full-width input fields */
        input[type=text], input[type=email], input[type=tel] {
            width: 100%;
            padding: 15px;
            margin: 5px 0 22px 0;
            display: inline-block;
            border: none;
            background: #f1f1f1;
        }

        input[type=text]:focus, input[type=email], input[type=tel] {
            background-color: #ddd;
            outline: none;
        }

        /* Overwrite default styles of hr */
        hr {
            border: 1px solid #f1f1f1;
            margin-bottom: 25px;
        }

        /* Create two equal columns that floats next to each other */
        .column {
            float: left;
            width: 50%;
            padding: 10px;
            height: 300px; /* column height */
        }

        /* Clear floats after the columns */
        .row:after {
            content: "";
            display: table;
            clear: both;
        }

        .savebtn {
            background-color: #50394c;
            color: white;
            padding: 14px 20px;
            margin: 8px 0;
            border: none;
            cursor: pointer;
            width: 100%;
        }

        .savebtn:hover {
            opacity: 0.8;
        }
        /* Add a light blue text color to unsubscribe link */
        a.unsubscribe {
            color: dodgerblue;
        }
        /* Add a bold blue text color to change password link */
        a {
            color: #191970;
            font-weight: bold;
        }
        /* Set a purple color and float the text of the "errMsg" class to the right */
        span.errMsg {
            float: right;
            color: #3733FF;
        }
        /* Set style for the logout button */
        input.logout[type=button] {
            width: 10%;
            padding: 12px 18px;
            background-color: #f44336;
            cursor: pointer;
            color: white;
        }
        span.unsubscribe {
            float: right;
            padding-top: 16px;
        }
    </style>
</head>
<body>
    <form action="/Home/UserAccount" method="post">
        <div class="container">
            <h1>Account Settings</h1>
            <hr>
            <div class="row">
                <div class="column">
                    <label for="acctEmail"><b>@Html.LabelFor(model => model.acctEmail)</b></label>
                    <span class="errMsg"><b>@Html.ValidationMessageFor(model => model.acctEmail, "")</b></span>
                    @Html.EditorFor(model => model.acctEmail, new { htmlAttributes = new { placeholder = "User's Email", autofocus = "" } })

                    <label for="acctPhoneNumber"><b>@Html.LabelFor(model => model.acctPhoneNumber)</b></label>
                    <span class="errMsg"><b>@Html.ValidationMessageFor(model => model.acctPhoneNumber, "")</b></span>
                    @Html.EditorFor(model => model.acctPhoneNumber, new { htmlAttributes = new { placeholder = "Enter Phone Number" } })

                    <label for="acctName"><b>@Html.LabelFor(model => model.acctName)</b></label>
                    <span class="errMsg"><b>@Html.ValidationMessageFor(model => model.acctName, "")</b></span>
                    @Html.EditorFor(model => model.acctName, new { htmlAttributes = new { placeholder = "User's name" } })

                    @Html.ActionLink("Change Password", "ChangePassword")
                </div>
                <div class="column">
                    <label for="notifications"><b>Please select alert type:</b></label><br>
                    @Html.CheckBoxFor(model => model.isEmailNotiType) Email<br>
                    @Html.CheckBoxFor(model => model.isTextNotiType) SMS<br><br />

                    <label for="carrier"><b>Please select phone carrier:</b></label>
                    <br>
                        @Html.DropDownListFor(model => model.acctCarrier, Model.list)
                    <br><br />
                    @*<input type="checkbox" name="notiType" value="email"> Email<br>
        <input type="checkbox" name="notiType" value="txt"> Txt Msg<br>
        <input type="checkbox" name="notiType" value="both"> Both<br><br>*@

                    <label for="locations"><b>Please select desired locations:</b></label><br>
                    @Html.CheckBoxFor(model => model.isSYLocation) Sylvania Campus<br>
                    @Html.CheckBoxFor(model => model.isRCLocation) Rock Creek Campus<br>
                    @Html.CheckBoxFor(model => model.isCASLocation) Cascade Campus<br>
                    @Html.CheckBoxFor(model => model.isSELocation) Southeast Campus<br>
                    @*<input type="checkbox" name="location" value="SY"> Sylvania Campus<br>
        <input type="checkbox" name="location" value="RC"> Rock Creek Campus<br>
        <input type="checkbox" name="location" value="CAS"> Cascade Campus<br>


                    @*public bool isEmailNotiType { get; set; }
        public bool isTextNotiType { get; set; }
        public bool isBothNotiType { get; set; }

        public bool isSYLocation { get; set; }
        public bool isRCLocation { get; set; }
        public bool isCASLocation { get; set; }
        public bool isSELocation { get; set; }*@

                </div>
            </div>
            <hr>
            <button type="submit" class="savebtn">Save Changes</button>
        </div>
        <div class="container" style="background-color:#f1f1f1">
            <input type="button" class="logout" onclick="location.href='/Home/Logout';" value="Logout" />
            <span class="unsubscribe">Remove From List? <a href="/Home/Unsubscribe" class="unsubscribe">Unsubscribe here</a>.</span>          
        </div>
    </form>

    @Html.ValidationSummary(true, "")

    @section Scripts {
        @Scripts.Render("~/bundles/jquery")
        @Scripts.Render("~/bundles/jqueryval")
    }

    @{
        // Prompts a message to confirm if changes were saved
        if (Model != null)
        {
            if (!string.IsNullOrWhiteSpace(Model.message))
            {
                <script>
                    Swal.fire({
                        title: '@Model.message',
                        text:  'Your changes are saved, @Model.acctName!',
                        type:  'success'
                    });
                </script>
            }
            if (!string.IsNullOrWhiteSpace(Model.errMessage))
            {
                <script>
                    Swal.fire({
                        title: 'Changes failed',
                        text:  '@Model.errMessage',
                        type:  'error'
                    });
                </script>
            }
        }
    }
</body>
</html>
